{
  // Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Comment see reference": {
    "prefix": "comment_see_ref",
    "body": "<see cref=\"$1\"/>"
  },
  "Ignore missing XML comment for public type or member warning": {
    "prefix": "ignore_xml_comment_warning",
    "body": [
      "#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member",
      "#pragma warning disable SA1600 // Elements must be documented"
    ]
  },
  "Test Fact": {
    "prefix": "test_fact",
    "body": [
      "[PrettyFact]",
      "public void Given${1/ /_/g}When${2/ /_/g}Then${3/ /_/g}()",
      "{",
      "\t// Arrange.",
      "\t${0}",
      "\t// Act.",
      "\t",
      "\t// Assert.",
      "}"
    ]
  },
  "Test Action: Argument is null": {
    "description": "Creates a test action snippet for unit testing.",
    "body": [
      "Action ${1:testCode} = () => $2;",
      "",
      "// Assert.",
      "testCode.Should()",
      "        .Throw<ArgumentNullException>()",
      "        .WithMessage(\"*cannot be null*${3:variable}*\");"
    ],
    "prefix": "test_action"
  }
}
